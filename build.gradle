group 'GradleSpring'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'war'

sourceCompatibility = 1.8 //소스코드의 자바 문법 버전
//comiileJava.options.encoding = 'UTF-8'  소스파일의 인코딩 형식 지정



/* jar{} : java plugin에 속하며 jar파일에 대해서 설정 할 수 있음
jar{
    manifest{
        attributes 'Implementation-Title':'Gradle Quickstart','Implementation-Version':version
    }
}

manifest : MANIFEST.MF 파일에 들어갈 속성=값 정보를 설정. 이 파일은 jar파일 안에 META-INF에 들어감
archiveName : JAR 파일 이름, 지정하지 않으면 다음 조항으로 이름 지정. baseName-appendix-version-classifier.extension 이렇게 파일이름 저장
baseName : JAR파일의 기본이름
appendix : 추가할 말
version : 버전
classifier : 분류자
extension : 확장자? 기본값은 jar
excludes : jar파일에서 제외할 파일에 대해 지정
includes : jar파일에서 포함할 파일에 대해 지정


* */

//repositories 의존 라이브러리를 가져올 저장소 설정
repositories {
    mavenCentral()
    //mavenCentral()
    /*
    *mavenCentral() maven 중앙 서버를 저장소로 지정. 서버의 기본 URL은 http://repo1.maven.org/maven2/
    *flatDir() : 로컬 폴더를 저장소로 지정
    *ivy() : Apache Ivy 서버를 저장소로 지정
    *jcenter() : Bintray의 jcenter 서버를 저장소로 지정
    *mavenLocal() : Maven로컬 임시 보관소를 저장소로 지정
    * */
}

dependencies {//프로젝트에서 사용할 의존 라이브러리 지정
    //dependencied{[설정 이름] [의존 라이브러리] }
    //testCompile("junit:junit:4.11")
    compile 'org.springframework:spring-context:4.2.4.RELEASE'
    compile 'org.springframework:spring-jdbc:4.2.4.RELEASE'
    compile 'mysql:mysql-connector-java:5.1.34'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.springframework:spring-test:4.2.4.RELEASE'
    testCompile group: 'junit', name: 'junit', version: '4.9'

   /*compile 라이브러리 : 라이브러리를 compilejava 작업을 수행할 때 사용
    runtime 라이브러리 : 라이브러리를 실행 시에 사용
    testCompile 라이브러리 : 라이브러리를 compileTestJava 작업울 수행할 때
    이 작업은 compileJava를 포함하고 있으므로 compile한 라이브러리는 제외하고 적용
    testRuntime 라이브러리 : 라이브러리를 test 작업을 수행할 때 사용.
    이작업은 compileJava, compileTestJava 작업을 포함하고 있으므로 compile, testCompile한 라이브러리는 제외하고 적용
    providedCompile 라이브러리: compile과 같다. 다만. war 파일에는 포함되지 않는다
    providedRuntime 라이브러리 : runtime과 같다. 다만 war 파일에는 포함되지 않는다

     라이브러리 표기법
     'group:name:version:classiifier'
     Example: 'org.springframework:spring-contxt:4.1.4.RELEASE'
     group: '그룹명', name: '라이브러리 이름', version : '라이브러리 버전', classifier '분류접미사'
    Example: gruop: 'commons-collections' , name : 'commons-collections ', version : '3.2'
    name값을 제외하면 꼭 적을 필요는 없다.
     */
}




/* test{} : 테스트 설정 정보
* test{
* systemProperties : 테스트를 실행하는 JVM에 전달할 시스템 프로퍼티 지정
* classpath : 테스트 작업을 수행할 때 사용할 클래스 경로지정
* excludes : 테스트에서 제외할 클래스 지정. ANT 스타일 패턴을 사용 예)excludes = ['org/foo/**'] 이건 org.foo패키지아래의 모든 클래스를 테스트에서 제외
* includes : 테스트에 포함할 클래스 지정. ANT 스타일 패턴을 사용 예) includes = ['org/boo/**] 이건 org.voo 패키지 아래의 모든 클래스를 테스트에 포함
* minHeapSize : 테스트 할때 JVM에 전달할 최소 힙 메모리 크기
* maxHeapSize : 테스트 할때 JVM에 전달할 최대 힙 메모리 크기
* jvmArgs : JVM에게 전달할 추가 인자 값. 시스템 프로퍼티와 최대/최소 힙 메모리 크기는 별도로 지정하기 때문에 이 항목에서는 포함되지 않는다.
* useJUnit() : 테스트할 때 사용할 프레임워크로  JUnit을 지정한다. 기본 JUnit을 사용
* useTestNG() : 테스트할 때 사용할 프레임워크로 TestNG를 지정한다. 생략하면 JUnitdmf tkdyd
*  beforeTest{} : 테스트를 시작하기 전에 수행할 명령들을 지정
*
* }
*
*
* */

//uploadArchives{} : 아카이브파일(.jar) 배포
/*
uploadArcjoves{
    repositories{
        flatDir{
            dirs 'repos'
        }
    }
}
*/